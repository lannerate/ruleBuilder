<?xml version="1.0" encoding="ISO-8859-1"?>
<MethodInfos displayName="java">
 <GlobalMethod funcName="now()" disName="now" returnType="datetime" typeName="DATE">
  <funcBody>
DateUtil.now()  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="exceptionmessage()" disName="exception massage" returnType="string" typeName="SYSTEM">
  <funcBody>
e.getMessage()  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="left(string,int)" disName="get {string} left {int} string" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.GCPub.stringLeft({string},{int})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="stringRight(string,int)" disName="get {string} right {int} string" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.GCPub.stringRight({string},{int})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="middle(int,int)" disName="get {string} to {int} to {int} string" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.StringUtil.substring({string},{int},{int})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="round(double)" disName="round {double}" returnType="long" typeName="NUMBER">
  <funcBody>
MathUtil.round({double})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="round(float)" disName="round {float}" returnType="int" typeName="NUMBER">
  <funcBody>
MathUtil.round({float})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="abs(double)" disName="abs {double}" returnType="double" typeName="NUMBER">
  <funcBody>
MathUtil.abs({double})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="max(double,double)" disName="max of {double} and {double}" returnType="double" typeName="NUMBER">
  <funcBody>
MathUtil.max({double},{double})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="min(double,double)" disName="min of {double} and {double}" returnType="double" typeName="NUMBER">
  <funcBody>
MathUtil.min({double},{double})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="random()" disName="random" returnType="double" typeName="NUMBER">
  <funcBody>
MathUtil.random()  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="monthdays" disName="get days of year {int} and month {int}" returnType="int" typeName="DATE">
  <funcBody>
DateUtil.getCurMonthDays({int},{int})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="dateAdd" disName="get {date} after {int} days" returnType="date" typeName="DATE">
  <funcBody>
DateUtil.dateAdd({date},{int})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="dateMinus" disName="get {date} before {int} days" returnType="date" typeName="DATE">
  <funcBody>
DateUtil.dateMinus({date},{int})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="parseInt(string)" disName="parse {string} to integer" returnType="int" typeName="NUMBER">
  <funcBody>
com.flagleader.util.NumberUtil.parseInt({string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="parseDouble(string)" disName="parse {string} to double" returnType="double" typeName="NUMBER">
  <funcBody>
com.flagleader.util.NumberUtil.parseDouble({string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="getNumberString(string)" disName="get {string} number string" returnType="string" typeName="NUMBER">
  <funcBody>
com.flagleader.util.NumberUtil.getNumberString({string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="isNumber(string)" disName="is {string} string" returnType="boolean" typeName="NUMBER">
  <funcBody>
com.flagleader.util.NumberUtil.isNumber({string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="formatDouble(double,string)" disName="format {double} to string by {string} format" returnType="string" typeName="NUMBER">
  <funcBody>
com.flagleader.util.NumberUtil.formatDouble({double},{string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="replaceAll(string,string,string)" disName="in {string} replace {string} to {string}" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.StringUtil.replaceAll({string},{string},{string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="stringToList(string,string,string)" disName="split {string} to list ,value type is {string} and split char is{string}" returnType="list" typeName="STRING">
  <funcBody>
com.flagleader.util.ListUtil.stringToList({string},{string},{string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="getNumber" disName="get string of {string} must in {string}" returnType="string" typeName="NUMBER">
  <funcBody>
com.flagleader.util.GCPub.getNumber({string},{string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="currentDate" disName="string date of today by {string} format" returnType="string" typeName="DATE">
  <funcBody>
com.flagleader.util.GCPub.currentDate({string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="stringValue(double)" disName="string value of {double}" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.StringUtil.stringValue({double})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="stringValue(int)" disName="string value of {int}" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.StringUtil.stringValue({int})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="format(string,string)" disName="string value of {string} by {string} format" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.GCPub.format({string},{string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="length(string}" disName="length of {string}" returnType="int" typeName="STRING">
  <funcBody>
com.flagleader.util.StringUtil.length({string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="compressDirectory(string,string)" disName="compress {string} directory to {string} file" returnType="void" typeName="STRING">
  <funcBody>
com.flagleader.util.GCPub.compressDirectory({string},{string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="toLowerCase(string)" disName="lower case string of {arg1}" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.StringUtil.toLowerCase({string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="toUpperCase(string)" disName="upper case string of {arg1}" returnType="string" typeName="STRING">
  <funcBody>
com.flagleader.util.StringUtil.toUpperCase({string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="newline" disName="new line" returnType="string" typeName="STRING">
  <funcBody>
StringUtil.newline  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="splitNoEmpty(string)" disName="split {arg1} by {arg2} to array and ignore empty" returnType="string[&#93;" typeName="STRING">
  <funcBody>
StringUtil.splitNoEmpty({string},{string})  </funcBody>
 </GlobalMethod>
 <GlobalMethod funcName="trim(string)" disName="trim {arg1}" returnType="string" typeName="STRING">
  <funcBody>
StringUtil.trim({string})  </funcBody>
 </GlobalMethod>
 <TypeMethod funcName="length()" disName="the length of $p" returnType="int" typeName="string">
  <funcBody>
com.flagleader.util.StringUtil.length($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="trim()" disName="trim $p" returnType="string" typeName="string">
  <funcBody>
com.flagleader.util.StringUtil.trim($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="parseInt()" disName="parse $p to integer" returnType="int" typeName="string">
  <funcBody>
com.flagleader.util.NumberUtil.parseInt($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="parseDouble()" disName="parse $p to double" returnType="double" typeName="string">
  <funcBody>
com.flagleader.util.NumberUtil.parseDouble($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="parseBoolean()" disName="parse $p to boolean" returnType="boolean" typeName="string">
  <funcBody>
com.flagleader.util.NumberUtil.parseBoolean($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="parseDate" disName="parse $p to date" returnType="date" typeName="string">
  <funcBody>
DateUtil.getDate($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="parseDatetime" disName="parse $p to datetime" returnType="datetime" typeName="string">
  <funcBody>
DateUtil.getDateTime($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="left(int)" disName="get sub string of $p left {int} " returnType="string" typeName="string">
  <funcBody>
com.flagleader.util.StringUtil.substring($p,0,{int})  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="start(int)" disName="get sub string of $p start from {int}" returnType="string" typeName="string">
  <funcBody>
com.flagleader.util.StringUtil.substring($p,{int},$p.length())  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="right(int)" disName="get sub string of $p right {int}" returnType="string" typeName="string">
  <funcBody>
com.flagleader.util.StringUtil.substring($p,$p.length()-{int})  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="middle(int)" disName="get sub string of $p between {int} and {int}" returnType="string" typeName="string">
  <funcBody>
com.flagleader.util.StringUtil.substring($p,{int},{int})  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="split(string)" disName="split $p by {string}" returnType="string[&#93;" typeName="string">
  <funcBody>
com.flagleader.util.StringUtil.split($p,{string})  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="round()" disName="round $p" returnType="long" typeName="double">
  <funcBody>
MathUtil.round($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="stringDate()" disName="from $p to string" returnType="string" typeName="date">
  <funcBody>
DateUtil.stringDate($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="dayofweek()" disName="get $p's day of week" returnType="int" typeName="date">
  <funcBody>
DateUtil.getDayOfWeek($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="getDayOfYear()" disName="get $p's day of year" returnType="int" typeName="date">
  <funcBody>
DateUtil.getDayOfYear($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="indexOf(string)" disName="$p's index of {string}" returnType="int" typeName="string">
  <funcBody>
com.flagleader.util.StringUtil.indexOfString($p,{string})  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="year()" disName="$p's year" returnType="int" typeName="date">
  <funcBody>
DateUtil.year($p)  </funcBody>
 </TypeMethod>
 <TypeMethod funcName="month" disName="$p's month" returnType="int" typeName="date">
  <funcBody>
DateUtil.month($p)  </funcBody>
 </TypeMethod>
</MethodInfos>
