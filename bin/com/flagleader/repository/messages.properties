timeFormat=HH\:mm\:ss
dateFormat=yyyy-MM-dd
datetimeFormat=yyyy-MM-dd HH\:mm\:ss

#-------------------Tree--------------------------------------------
RuleGroup.text						=RuleGroup
RuleProject.text                    =Project
RulePackage.text                    =RulePackage
RuleSet.text                        =RuleSet
RuleSetFlow.text                    =RuleFlow
Rule.text                           =Rule
RuleElementToken.text               =Rule
Envionment.text                     =Object Library
ClassContainer.text                 =Class Library
CustomFunction.text                 =Custom Function
EnumLibrary.text                    =Static Value Library
FunctionLibrary.text                =Function Library
TestCase.text                       =Test Unit
TestCaseLib.text                    =Batch Test
ValueLibrary.text                   =Inout Value Library
VariableLibrary.text                =Temp Value Library 
ExportModel.text                    =ExportPage
DecisionRule.text				   =decision table
Envionment.comm                     =Rules Template
ClassContainer.comm                 =Class Library
CustomFunction.comm                 =Custom Function
EnumLibrary.comm                    =Static Value Library
FunctionLibrary.comm                =Function Library
ValueLibrary.comm                   =Inout Value Library
VariableLibrary.comm                =Temp Value Library
RuleSet.comm                        =Common Rule Set
RuleSetFlow.comm                    =Common Rule Flow
Rule.comm                           =Common Rule
ExportModel.comm                    =Export Page
DecisionRule.comm  				    =decision table
DecisionMultiRule.comm				=multi decision
DecisionMultiRule.text				=multi decision
DecisionRelateRule.comm				=relate decision
DecisionRelateRule.text				=relate decision

ExpressionRule.text	=Expression Rule
ExpressionRule.comm	= Expression Rule
RuleTreeFlow.text	=Rule Tree
RuleTreeFlow.comm	=Rule Tree
RulePoolFlow.text	=Rule Pool
RulePoolFlow.comm	=Rule Pool

BOContainerGroup.text	=Data Group
BOContainerGroup.comm	=Data Group
SheetMap.text	=Directory
SheetMap.comm	=Directory

xmlNode.text	=XMLNode
TreeValueNode.text=TreeNode
TreeValueNode.root=datatree


EnumTable.text				=enum table
EnumTable.comm				=enum table

RuleMirror.text	=rule mirror
RuleMirror.comm	=rule mirror

SoapService.text=web service
SoapService.comm=web service
SheetTable.text=Sheet
SheetTable.comm=Sheet

SheetMap.text=Map
ExcelBookModel.text=Excel
ExcelSheetModel.text=Sheet
ExcelTableSheetModel.text=Table Sheet
ExcelXYSheetModel.text=xytable
#--------------------rom------------------------------------------
tv_if          =if:
tv_elseif      =else if:
tv_more_than   =more than
tv_and         =and
tv_less_than   =less than
tv_then        =then:
tv_else        =else:
tv_init			=init:
tv_enter		=condition:
tv_catch		=catch:
tv_ifthen		=if then:
tv_condition	=condition
tv_action		=action

decisioncondition.text =condition
catch_exception    					=catch exception e :
init.text          					=initialize:
test.text          					=repeat condition:
condition.text    					=enter condition:
block.text        					=repeat step block:
first.text		=first action:
col.text		   =condition 2
row.text		   =condition 1
function.text	   =function

decitioncondition.text =condition
decisionassign.text	=assign
decisionaction.text =action
#-------------------Note---------------------------------------------
Rule.note    						=Rule
RuleObjectLibrary.note    			=Rule Object Library    
RuleObjectReflect.note    			=Rule Object 
RulePackage.note    				=Rule Package
RuleProject.note   			 		=Project
RuleRepository.note    				=Repository
RuleSet.note           				=Rule Set
RuleSetFlow.note           			=Rule Flow

BusinessObjectClass.note    		=Class Object
BusinessObjectMethod.note    		=Class Method
BusinessObjectAttribute.note    	=Class Attribute
ObjectReflectToken.note    			=Object      

ActionToken.note    				=Action
ConditionToken.note    				=Condition
ConstantToken.note    				=Constant 
FieldToken.note    					=Object Value
RuleElementToken.note    			=Rule Object     
ValueToken.note    					=Value
NumberJudgeToken.note    			=Number judge operator    
StringJudgeToken.note    			=String judge operator         
JudgeToken.note    					=Judge
ModifyToken.note   					=Assign Value
OperatorJudgeToken.note    			=Operator       
NaryJudgeToken.note    				=Nary   
MethodToken.note    				=Method
NewToken.note        				=New Class Object 
ReturnToken.note     				=Exit Rule
RunToken.note        				=Run
ThrowToken.note     		 		=throw

ExcuteRuleToken.note =execute rule type
LogRecordToken.note	 =log record

#--------------------------------TableModel----------------------------------
equels.table         =equals to

setField.table			 ={0}'s {1} equals to
getField.table			 ={0}'s {1}
selectSQL.table			 =excute {0} by sql

resetValues.table        =reset the record result value of table {0}
selectAll.table          =select all record of table {0}
close.table              =close the select result set of table {0}
insert.table             =insert the current record into table {0}
update.table             =update the current record to table {0}
replace.table             =replace the current record to table {0}
delete.table             =delete the current record from table {0}
hasExported.table        =the primary key of the table {0} has been exported
select.table             =select record of table {0} by the current record value
selectWhere.table        =select {1} by {0}
hasNext.table            =has next record from the result of table {0}
next.table               =get next record from the result of table {0}
getRows.table            =the count of record result of table {0}
first.table              =get first record from the result of table {0}
previous.table           =get previois record from the result of table {0}
last.table               =get last record from the result of table {0}
getAllBean.table         =get all record list from the result of table {0}
getCurrentRow.table      =get the number of the current record from the result of table {0}
gotoRow.table            =get the {1}th record from the result of table {0}
excute.table             =excute {1} by {0}
updateByForeignKey.table =update the current record to table {0} by foreign key
deleteByForeignKey.table =delete the current record from table {0} by foreign key
updateBySheet.table		 =insert all the fields of {0} into {1} database table
insertBySheet.table		 =update by the fields of {0} to {1} database table
insertAndGeneratedKey.table=insert one record into {0} and get generated key

selectWhere.select        =select {1} by {0}
hasNext.select            =has next record from the result of table {0}
next.select               =get next record from the result of table {0}
getRows.select            =the count of record result of table {0}
first.select              =get first record from the result of table {0}
beforeFirst.select        =move to before the first record from the result of table {0}
previous.select           =get previois record from the result of table {0}
last.select               =get last record from the result of table {0}
getAllBean.select         =get all record list from the result of table {0}
getCurrentRow.select      =get the number of the current record from the result of table {0}
gotoRow.select            =get the {1}th record from the result of table {0}
setField.select			 ={0} equals to
getField.select			 ={0}'s {1}
selectSQL.select		 =excute {0} by sql
setOrderField.select      =set {0} order field {1} and desc type {2}
setPage.select            =set {0} page num {1} and per page {2}
getCount.select           =get {0} record count
loadFromSql.sheet		=load data from sql {0}
loadFromSql2.sheet		=execute sql {0} to init {1}
loadFromView.sheet		=put data from result {0} to spreadsheet {1}
updateBySheet.sheet		=use data of spreadsheet {0} to update spreadsheet {1}, update column in {2} and match column in {3}
loadFromSheet.sheet		=put data of spreadsheet {0} to spreadsheet {1}
createSheet.sheet		=create spreadsheet {0}, sum column is in {1}, group column is in {2} and where column is in {3}
loadFromScript.sheet	=put spreadsheet {0}(sum column is in {1}, group column is in {2} and where column is in {3})to spreadsheet {4}
beforeFirst.sheet		=before first record of {0}
next.sheet				=get next record of {0}
getListResult.sheet		=get all list result of {0}
loadFromList.sheet		=load data from list {0} to spreadsheet {1}
getRows.sheet			=get records number of {0}
first.sheet				=get first record of {0}
previous.sheet			=get precious record of {0}
last.sheet				=get last record of {0}
getCurrentRow.sheet		=get current record location of {0}
gotoRow.sheet			=get spreadsheet {0} No.{1} record
insert.sheet			=insert empty record in {0}
delete.sheet			=delete current row in {0}
afterLast.sheet			=after last record of {0}

loadFromResult.sheet	=load data from {0} into spreadsheet {1}
updateFromSheet.sheet	=load data from spreadsheet {0} update to sheet {1}
initFromSheet.sheet		=load data from spreadsheet {0} into {1}
afterLast.sheetgroup		=record
appendFromResult.sheet	=load data from list {0} append into spreadsheet {1}
resetValues.sheet        =empty record of {0} 
updateByDynamicSheet.sheet=use data of spreadsheet {0} update value to {1}
appendFromSheet.sheet		=append data of spreadsheet {0} to spreadsheet {1}

updateByResult.sheet				=use data from result {0} update {1}, update column is {2} and match column is {3}
updateFromResult.sheet			=use data of {0} to update spreadsheet {1}
updateByResult.sheetgroup		=database
updateFromResult.sheetgroup	=database
resetValues.sheetgroup      =result
appendFromSheet.sheetgroup      =spreadsheet

setFieldList.sheet		=set spreadsheet {0} column {1}'s value to {2}
setFieldList.sheetgroup	=result
fentan.sheet		=input {0} to {1}
fentan.sheetgroup	=spreadsheet

resetValues.tablegroup        =query
selectAll.tablegroup          =query
close.tablegroup              =query
insert.tablegroup             =update
update.tablegroup             =update
replace.tablegroup             =update
delete.tablegroup             =update
select.tablegroup             =query
hasExported.tablegroup        =update
hasNext.tablegroup            =result
next.tablegroup               =result
getRows.tablegroup            =result
first.tablegroup              =result
previous.tablegroup           =result
last.tablegroup               =result
getAllBean.tablegroup         =result
getCurrentRow.tablegroup      =result
gotoRow.tablegroup            =result
updateByForeignKey.tablegroup =update
deleteByForeignKey.tablegroup =update
excute.tablegroup             =update
updateBySheet.tablegroup	  =update
insertBySheet.tablegroup	  =update
insertAndGeneratedKey.tablegroup=update

selectWhere.selectgroup        =query
selectSQL.selectgroup		   =query
hasNext.selectgroup            =result
next.selectgroup               =result
getRows.selectgroup            =result
first.selectgroup              =result
beforeFirst.selectgroup        =result
previous.selectgroup           =result
last.selectgroup               =result
getAllBean.selectgroup         =result
getCurrentRow.selectgroup      =result
gotoRow.selectgroup            =result
close.selectgroup              =query

setOrderField.selectgroup      =pages
setPage.selectgroup            =pages
getCount.selectgroup           =pages

setField.selectgroup		=modify
getField.selectgroup		=read
setWhereObject.selectgroup	=condition

loadFromSql.sheetgroup		=database
loadFromSql2.sheetgroup		=database
loadFromView.sheetgroup		=database
loadFromResult.sheetgroup	=database
appendFromResult.sheetgroup	=database
getListResult.sheetgroup	=result
loadFromList.sheetgroup		=result
loadFromList.sheetgroup		=result

updateBySheet.sheetgroup	=spreadsheet
loadFromSheet.sheetgroup	=spreadsheet
createSheet.sheetgroup		=spreadsheet
loadFromScript.sheetgroup	=spreadsheet
updateFromSheet.sheetgroup	=spreadsheet
initFromSheet.sheetgroup	=spreadsheet
appendFromSheet.sheetgroup	=spreadsheet
updateByDynamicSheet.sheetgroup=spreadsheet

beforeFirst.sheetgroup		=result
next.sheetgroup				=result
getRows.sheetgroup			=result
first.sheetgroup			=result
previous.sheetgroup			=result
last.sheetgroup				=result
getCurrentRow.sheetgroup	=result
gotoRow.sheetgroup			=result
insert.sheetgroup			=result
delete.sheetgroup			=result
afterLast.sheetgroup		=result

insertValues.sheetgroup	=result
insertValues.sheet	=insert {0} record, and {1}
insertParam.sheet	={0} = {1}
updateValues.sheetgroup	=result
updateValues.sheet	=update {0} record, and {1}

#--------------------------------XmlNode--------------------------------------
loadFromString.xml		=load {1} xml node from {0} string
getContent.xml			=get string value of {0} xml node
addNode.xml				=insert {0} node into {1} xml node
getNode.xml				=get node nameed {1} from {0} xml node
getNodes.xml			=get all nodes nameed {1} from {0} xml node
dispose.xml				=dispose {0} xml node
removeNode.xml			=remove all nodes names {1} from {0} xml node
removeNode2.xml			=remove {1} node from {0} xml node
equels.xml				=equals to

getText.xml            =get{0}'s text
setText.xml            =set {0}'s text to {1}
getCData.xml =get {0}'s cdata value
setCData.xml =set {0}'s cdata value to {1}
clear.xml       =clear {0}
init.xml        =init {0}
#--------------------------------Edit----------------------------------
EqualsTo.edit            =equals to
NotEqualsTo.edit         =not equals to
MoreThan.edit            =more than
MoreAndEqual.edit        =more than and equals to
LessThan.edit            =less than
LessAndEqual.edit        =less than and eques to
noType.edit              =input:
Equals.edit              =equals to
notEquals.edit           =not equals to
startWith.edit           =start with
endWith.edit             =end with
Include.edit             =include
notInclude.edit          =not include
notNary.edit             =and
isNary.edit              =or

stringInclude.edit		=include in
listInclude.edit		=include in
notStringInclude.edit	=not include in
exits.edit               =exits
notExits.edit            =not exits
isEmpty.edit             =empty
notEmpty.edit            =not empty
yes.edit                 =Yes
no.edit                  =No

notstartwith.edit	=not start with
notendwith.edit		=not end with
equalsreqular.edit	=reqular equals to
equalsnocase.edit	=equals no case to
equalsnospace.edit	=equals no space to
equalsnopunct.edit	=equals to (no punct)
equalsnoascii.edit	=equals to (no byte code)
equalslocalpunct.edit	=equals to (no chinese punct)

EqualsYear.edit		=equals to(same year)
EqualsQuarter.edit	=equals to(same quarter)
EqualsMonth.edit	=equals to(same month)
EqualsDay.edit		=equals to(same day)

setMember.edit    	=method or variable
setConstant.edit    =input constant
addLeftParenthesis.edit    =add a left parenthesis
DeleteLeftParenthesis.edit =delete a left parenthesis     
AddRightParenthesis.edit    =add a right parenthesis 
DeleteRightParenthesis.edit =delete a right parenthesis
setSheetField.edit		=select field

setMethod.edit              =execute method
setAssign.edit              =assign variable
setNew.edit                 =new class object
setTextStatement.edit       =java source
setRun.edit                 =execute rule package
setTable.edit               =table function
setReturn.edit              =exit
setThrow.edit               =throw
setDebug.edit				=debug output
runRuleSet.edit             =excute rule package
setClass.edit               =select class object
setXml.edit					=Xml function
setTreeValue.edit			=Tree Function
insertAction.edit           =insert new action before 
addCondition.edit           =add new condition
addAction.edit              =add new action
javaStatement.edit			=java statement

NoOperator.edit    			=  []
AddOperator.edit    		=  +
MinusOperator.edit    		=  -
MultiplyOperator.edit       =  *
DivideOperator.edit         =   /
AssignTo.edit	==

AddTo.edit    		=+=
MinusTo.edit    	=-=
MultiplyTo.edit   	=*=
DivideTo.edit       =/=
DivTo.edit          =%=
others.edit			=other

excuteLocal.edit	=visit local rule package named 
excuteExits.edit	=try visit local rule package named 
excuteServer.edit	=visit servlet rule package named
excuteService.edit	=visit web service rule package named
excuteVersion.edit	=main version
expressionParam.edit=expressions is 
expressionLocal.edit=execute expression named 
expressionExits.edit=compile and execute expression named
decisionLocal.edit=execute decision named
decisionExits.edit=compile and execute expression named

excuteAndExits.edit		=visit local rule package 
excuteNotExits.edit		=try visit local rule package 
excuteAndExitsThread.edit=asynchrone visit local rule package 
excuteNotExitsThread.edit=asynchrone try visit local rule package 

logError.edit	=append error log 
logWarning.edit	=append warning log
logInfo.edit	=append information log 
logDebug.edit	=append debug log
history.text			=history

setEnum.edit                =   click and select constant
newClass.edit               =   new class    
selectField.text            =   select field
inputValue.text             =   input value
selectClass.text            =   select class object
selectMethod.text           =   select class method
selectMember.text           =   select class member
newClass.text               =   new class   
selectRuleSet.text          =   select rule package
throw.text                  =   throw 
selectConstant.text         =   select constant
runRule.text                =   run rule package
debug.text					=   output when debug
thisRule.edit               =   this rule
parentSet.edit              =   parent rule set
mainSet.edit                =   this rule package
reStart.edit                =   restart this rule package
error.text                  =   error
return.edit                 =   exit
setLog.edit					=add log record
setDB.edit					=database function
setSheet.edit				=spreadsheet function
setExcel.edit				=excel function
setSoap.edit				=web service function
setStatic.edit				=static function
setMapValue.edit			=dictionary function

setVariableMember.edit		=variable
setStaticMember.edit		=static member
setDBMember.edit			=database member
setSheetMember.edit			=spreadsheet member
setExcelMember.edit			=excel member
setSoapMember.edit			=web service member
setXmlMember.edit			=xml node member
setTreeMember.edit			=tree member
setMapMember.edit			=dictionary member
setExe.edit					=visit rule package
setExpression.edit			=execute expression
setDecision.edit		=execute decistion
setCustomMethod.edit		=custom method

selectDBMember.text				=select database object
selectSheetMember.text			=select spreadsheet object
selectExcelMember.text			=select excel object
selectSoapMember.text			=select web service object
selectXmlMember.text			=select xml node object
selectVariableMember.text			=select variable object
selectStaticMember.text			=select static object
selectEnumMember.text			=select enum member
selectTreeFunction.text			=select tree function
selectTreeMember.text			=select tree member
selectMapMember.text			=select dictionary member

selectDBFunction.text			=select database function
selectSheetFunction.text			=select spreadsheet function
selectExcelFunction.text			=select excel function
selectSoapFunction.text			=select web service function
selectXmlFunction.text			=select xml node function
selectStaticFunction.text			=select static function
selectMapFunction.text	=select dictionary function

remove.edit                 =remove
addCondition.edit    		=   add condition
addAction.edit       		=   add action

initialValue.text              =initial value
expectValue.text               =expect value

setLoc.edit                 =change location

conditionForceNone.edit	=condition Force None
conditionForceString.edit=condition Force String
conditionForceInt.edit	=condition Force Int
conditionForceLong.edit	=condition Force Long
conditionForceDouble.edit	=condition Force Double
conditionForceDecimal.edit	=condition Force Decimal
conditionForceDate.edit	=condition Force Date
conditionForceBoolean.edit	=condition Force Boolean
conditionForceClass.edit	=condition Force Class

selectAction.edit			=click to select
sheetfentan.edit		={0}'s {1} by {2}'s {3}

system.text		=system

emptySelect.edit	=null
emptyValue.edit		=

sheetfield.text=column
sheetfunc.text=function
exeBack.edit=and get data to
#-----------------------------error-----------------------------------------
ruleError.error          =rule is error , please delete it and recreate.
rulePackError.error      =rule package {0} is error , please delete it and recreate .
twoReturnError.error     =rule only can include one return function.
twoReturnInCatch.error   =rule catch only can include one return function.
paramValue.error         =the type of input parameter has been changed.

duplicate.error			=duplicate define variable named {0}

methodParam.error           =error input for the param of method 
valueEmpty.error            =empty value , please input new value
memberType.error            =the member type is error
fieldExist.error            =the member is not exits
valueType.error             =value type is error
parenthesisNumber.error     =ths number of parenthesis is error 
noJudge.error               =please select judge operator 
noValue.error               =please input value
noField.error               =please select field
emptyRule.error             =rule is empty
checkError.error            =has error
errorSource.error           =source is error
noObjectReflect.error       =no object library
classUpdateError.error      =class update error,maybe the class is not exits.

noInput.error               =not input value.
classNotExist.error         =class is not exits.
newClassNotExist.error      =new class is not exits.
notFindClass.error          =can not find class
expectValue.error           =expect value of {0} is {1} but the result value is {2} 

functionDefEmpty.error      =custom function define is empty
funtionHit.error	      	=the define hint of function is error 
noFuncType.error            =not define function type
bigparenthsis.error         =big parenthsis define is error
paramParenthsis.error       =the parenthsis of param is error
paramNotMatch.error         =can not match element of param
paramElement.error          =the element of param is error
bigNotMatch.error           =can not match big parenthsis

fileFormat.error            =the format of file {0} is error .
fileNotFount.error			=the file {0} is not exits.
fileVersion.error		=rule package named {0} is edited by newer rule builder tool. please update you rule builder tool.

licenseexpired.error        =license if expired, please input new valid license key
noAssignedObject.error		=Decision Table named {0} at least has one assigned object
decisionValue.error			=the input value {2} can not accept {1} type in decision table named {0} 

decisionMemberExits.error	=the assign element {0} is not exits
varnameformat.error		={0} name is error, must characters.

#------------------------------function define-----------------------------------
public.def                  =  public 
private.def                 =  private
protected.def               =  protected
if.def                      =  if
then.def                    =  then
else.def                    =  else
while.def                   =  while
int.def                     =  int
long.def                    =  long
short.def                   =  short
char.def                    =  char
string.def                  =  String
boolean.def                 =  boolean
byte.def                    =  byte
float.def                   =  float
double.def                  =  double
do.def                      =  do
for.def                     =  for
condition.hed               =  condition

#-------------------------------html view-----------------------------------------
ruleName.hed                =  rule name
condition.hed               =  condition
then.hed                    =  passed
else.hed                    =  unpassed
isvisible.hed				=  is visible
name.hed                    =  name
type.hed                    =  type
displayname.hed             =  display name
groupname.hed				=group name
yes.hed                     =  yes
no.hed                      =  no
variable.hed             	=  variable

error.text					=error
fieldName.hed   =field name
fieldType.hed   =field type
valueType.hed   =value type
primaryKey.hed  =primary key
displayName.hed =display name

mapkey.hed=key
mapvalue.hed=value

rulepackagename.text		=rule package name
rulepackagedisname.text	=rule package display name
ruleversion.text	=rule auto version
rulemainversion.text=rule main version
ruleexception.text	=exception message
rulename.text		=rule name
rulesetname.text	=rule set name
traceRules.text		=rule trace road
loginuser.text		=current editor
ruleinputparameter.text	=rule package in parameter
ruleoutputparameter.text=rule package out parameter
ruleinoutparameter.text=rule package in or out parameter
rulein.text	=only in parameter
ruleout.text=only out parameter
ruleinout.text=in and out parameter
rulecondition.text=rule condition

testcaseinit.text=initial
testcasewill.text=except
testcaseresult.text=result

noEnvionment.error		=rule package {0} must include business object library
noRuleToken.error			=rule must include condition and action
twoReturn.error				=rule only can include one return action
twoCatchRuturn.error	=rule cation statements only can include one return action
returnRuleSet.error		=rule set statement can not include return action
noElementDecision.error=decition table {0} must select assign element
valueDecision.error		=the value type in decition table is error , expect type is {0} but the input type is {1}
ruleEmpty.error				=rule {0} can not be empty.
valueEmpty.error			={0} empty, must input value
valueTypeAssign.error				=in {0} the expect value type is {1} but the selected type is {2}
parenthesis.error			=in {0} the parenthesis number is error
valueMatch.error			=value is not match , first value {0}'s type is {1} and second value {2}'s type is {3}
memberExits.error			={0} is not exits
methodParams.error		={0}'s parameters number is error
methodDisplay.error		={0}'s parameters number is error
methodValueEmpty.error={0}'s parameter must select value
paramValueMatch.error	={0}'s parameter value is error , the expect type is {1} but selected type is {2}
conditionEmpty.error	=condition must select value
judgeEmpty.error			=condition must select judge value
judgeType.error				=condition value type is not match
conditionValueType.error	=the value type of condition is not match
conditionValueEmpty.error	=condition must select value
constantEmpty.error		=must select enum vallue
assignEmpty.error			=assign action can not be empty
assignMatch.error			=the value type of assign action is error, first value {0}'s type is {1} and second value {2}'s type is {3}
assignValue.error			=must select value in assign statement
newEmpty.error				=new action is empty
actionEmpty.error			=the action is empty
constantInput.error		=the input value is empty
whileEmpty.error		=not set condition in while 
constantNumberType.error=the input value must be number format, current is {0}
constantDateType.error	=the input value must be date format
sheetFieldUnset.error	=can not select spreadsheet column {0}, must set the rule to foreach {1}
tableFunctionUnset.error=can not visit spreadsheet {0}'s function {1}, because the rule has been set while

pagefieldexits.error    =page {0}'s field {1} is not exits
pagefieldtype.error           =page {0}'s field {1}'s type is {2}, but in business object library the type is {3}
pagevarexits.error            =page {0} not include {1}
valueDecisionDuplicate.error	=decition table condition error, vlaue {0} duplicate set condition {1}
valueDecisionConflict.error		=condition {0} and condition {1} has conflict
hasExitsPackage.error		=rule package {0} has been opened.
packagefilepath.error		=the rule package {0}'s file path {1} is error
whilenotexits.error			=must select while object when visit member of while object

samepackage.error			=same rule package, can not save!
emptydecisioncondition.error	=decition table condition is empty
valueException.error		=decition table condition {0} and {1} is error, may be value type error!
asnameNotExits.error	=the field name of {0} is not match
sheetFieldSelectExits.error	=the spreadsheet {0} column selected {1} is not exits
sheetExits.error		=the spreadsheet selectd {0} is not exits
sheetFunctionSelectExits.error	=the spreadsheet sum field {0} is not exits
sheetFieldMappingSelectExits.error=the spreadsheet match field {0} is not exits
sheetWhereSelectExits.error	=the spreadsheet field {0} is not exits.
ruleSetExist.error	=not select rule package
rulePackageTreeExits.error=rule package {0} not include tree object named {1}
rulePackageFieldExits.error=rule package {0} not include element named {1} and typed {2}
rulePackageTreeChanges.error=visit rule package {0} , the tree {1}'s struct is error!

#-----------------------------excel-----------------------
loadFromFile.excel		=read file {0} to create {1}
loadFromFile.excelgroup	=workbook
saveToFile.sheet		=save {0} to file {1}
saveToFile.excelgroup	=workbook

setCellColor.excel	=select {0}'s font color is {1}, and backgroud color is {2}
setCellForcolor.excel	=set {0}'s font color is {1}
setCellBackcolor.excel	=set {0}'s backgroud color is {1}

beforeFirstSheet.excel	=before first sheet of {0}
beforeFirstSheet.excelgroup=sheet
getNextSheet.excel		=get next sheet {0}
getNextSheet.excelgroup	=sheet
createSheet.excel		=create named {0} sheet {1}
createSheet.excelgroup	=sheet
getSheetName.excel		=get name of {0}
getSheetName.excelgroup	=sheet
mergeCell.excel			=merge cell of {0}, start pos is {1} and {2} and weight is {3} and {4}
mergeCell.excelgroup	=sheet

beforeFirstRow.excel	=before first row of {0}
beforeFirstRow.excelgroup=line
nextRow.excel				=get next row of {0}
nextRow.excelgroup		=line
insertRow.excel			=insert row into {0}
insertRow.excelgroup	=line
deleteRow.excel			=delete current row of {0}
deleteRow.excelgroup	=line

beforeFirstCell.excel	=before first cell of {0}
beforeFirstCell.excelgroup=data
nextCell.excel			=get next cell of {0}
nextCell.excelgroup		=data

getString.map	=get value from {0} by primary key {1}
getString.mapgroup=record
setString.map	=update {0} , change the value of {1} to {2}
setString.mapgroup=record
loadFromView.map	=put data of result {0} to {1}
loadFromView.mapgroup=function
updateBySheet.map	=use spreadsheet data in {0} to update {1}, the primary key in column {2} and value in column {3}
updateBySheet.mapgroup=function
updateByResult.map		=use data in {0} to update {1}, the primary key in column {2} and value in column {3}
updateByResult.mapgroup	=function
loadFromSheet.map		=load data from spreadsheet {0} to {1}
loadFromSheet.mapgroup	=function
getListResult.map		=get list result from {0}
getListResult.mapgroup	=record
loadFromList.map		=load result data from {0} to {1}
loadFromList.mapgroup	=function
getRows.map	=record number of {0}
getRows.mapgroup=record
resetValues.map		=empty {0}
resetValues.mapgroup=function

invoke.soap			=invoke {0} web service
resetValues.soap	=reset {0} parameters value
getReturnValue.soap	=get result of {0} 


excelrow.text	=Y
excelcell.text	=middle
excelcol.text	=X
xmlprop.text   =attributes

sheetresult.text =result
sheetresult1.text=orginal
sheetresult2.text=changed

loadSheetData.error=the data that location in {0} row and {1} column , {2}'s type is error
sheetFieldMappingType.error=the type of {0} is not match to the type of {1}
sheetFieldMappingParentExits.error=the column {0} that you selected is not subject to {1}

#--------------------color in excel----------------------
RED.COLOR	=red
BLUE.COLOR	=blue
YELLOW.COLOR	=yellow
GREEN.COLOR	=green
AQUA.COLOR	=aqua
BRIGHT_GREEN.COLOR	=bright green
PINK.COLOR	=pink
GREY_25_PERCENT.COLOR	=grey percent
LAVENDER.COLOR	=lavender
DARK_YELLOW.COLOR	=dark yellow
LIGHT_ORANGE.COLOR	=light orange
LIME.COLOR	=lime
VIOLET.COLOR	=voilet
GOLD.COLOR	=gold
BROWN.COLOR	=brown
ROSE.COLOR	=rose
LIGHT_TURQUOISE.COLOR	=light truquoise
BLUE_GREY.COLOR	=blue grey
TEAL.COLOR	=teal
BRIGHT_GREEN2.COLOR	=bright green
CORNFLOWER_BLUE.COLOR=cornflower blue
DARK_BLUE.COLOR	=dark blue
INDIGO.COLOR	=indigo
DARK_RED.COLOR	=dark red
PLUM.COLOR		= plum
PALE_BLUE.COLOR	=pale blue
LEMON_CHIFFON.COLOR	=lemon chiffon
MAROON.COLOR	=maroon
ORCHID.COLOR	=orchid
CORAL.COLOR		=coral
ROYAL_BLUE.COLOR	=royal blue
LIGHT_CORNFLOWER_BLUE.COLOR	=light cornflower blue
WHITE.COLOR	=write
BLACK.COLOR	=black
TURQUOISE.COLOR	=turquoise

hasstart.RuleExecuteInfo=started
notstart.RuleExecuteInfo=notstart
initial.RuleExecuteInfo=init
running.RuleExecuteInfo=running
waiting.RuleExecuteInfo=waiting
stoped.RuleExecuteInfo=stoped
executetimes.RuleExecuteInfo=last execute rule use {0} ms, all times is {1}
executetimes2.RuleExecuteInfo=all times is {0}

millisInfo.RuleExecuteInfo=run after {0} millis
secondsInfo.RuleExecuteInfo=run after {0} seconds
hoursInfo.RuleExecuteInfo=run after {0} hours and special time is {1}
daysInfo.RuleExecuteInfo=run after {0} days and special time is {1}
weeksInfo.RuleExecuteInfo=run after {0} weeks , special {1} day of week and special time is {2} 
monthsInfo.RuleExecuteInfo=run after {0} months , special {1} day of month and special time is {2}
afterOneInfo.RuleExecuteInfo=run once after {0} millis
datetimeOneInfo.RuleExecuteInfo=run once when date is {0} and time is {1}

ruleexecutestart.RuleExecuteInfo=thread for execute {0} has been started, and plan is that {1}
ruleexecutestop.RuleExecuteInfo=thread for execute {0} has been stoped.
ruleexecutecomplete.RuleExecuteInfo=execute {0} completed use {1} ms.

modify.vml	=modify
update.vml	=update
print.vml	=print

createWorkbook.excel	=create {0} 
createWorkbook.excelgroup=init

if.expression	=if
then.expression	=then
elseif.expression	=elseif
else.expression	=else
endif.expression	=endif

noendif.expression	=must input endif
nothen.expression	=must input then in {0}
notexitsbo.expression=business object is not exits : {0}
typeerrorbo.expression=the input value is error : {0}
expressionparseerror.error=expression has error : {0}
parseerror.expression=condition is error : {0}
actionerror.expression=action is error : {0}

osnotmath.error=current os {0} is not {1}
traildate.warn=license will be expired when {0}
trailexpired.error=license is expired 
licensecopied.error=license is copied , please required new license! id is {0}
licenseregister.info=this copy is used by {0}, type is {1}, last date is {2}. os system is {3}, cpu number is {4}.the machine code is {5}.
unlimited.info=unlimited
nolicense.error=no license file
localSystem.info=the cpu number is {0}, and system info is {1}


startdate.text=start
enddate.text=end

foreachadd.edit=for add
foreachadd1.edit=for
foreachadd2.edit=add
foreachadd3.edit=to
foreachminus.edit=for minus
foreachminus1.edit=for
foreachminus2.edit=minux
foreachminus3.edit=to
foreacharray.edit=for each array
foreacharray1.edit=for
foreacharray2.edit=in
foreachlist.edit=for each list
foreachlist1.edit=for
foreachlist2.edit=in
foreachmap.edit=for each map
foreachmap1.edit=for get key
foreachmap2.edit=and value
foreachmap3.edit=in

#---------------------------------------FtpService---------------------------------
connect.ftp				=connect to ftp server {0}
login.ftp					=login to ftp server use username {0}
upload.ftp				=upload ftp file named {0}
uploadfinish.ftp	=complete ftp file named {0}
ftpUploadFile.error=error when ftp , the detail is that {0}
ftpReject.error			=ftp server reject
ftpConnection.error	=ftp connection error
ftpNet.error				=network error
ftpUser.error				=ftp login error
ftp.error						=error when ftp, the detail is that {0}

decisionRuleX.head=X condition
dicisionRuleY.head=Y condition

nopackage.WebRepository=\u4e0d\u80fd\u5220\u9664{0}\uff0c\u8bf7\u5148\u5220\u9664\u5176\u4e2d\u7684\u89c4\u5219\u5305\u3002

rulepacklocknone.txt=active
rulepacklocked.txt=locked
rulepackigiore.txt=igniore
rulepackdeleted.txt=deleted